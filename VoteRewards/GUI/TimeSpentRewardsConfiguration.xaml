<Window x:Class="VoteRewards.TimeSpentRewardsConfiguration"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:local="clr-namespace:VoteRewards" xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d" 
        d:DesignHeight="450" d:DesignWidth="800">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
            <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
            <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
            <Style x:Key="TextBoxStyle1" TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" Cursor="" CornerRadius="8,8,8,8" BorderThickness="2,2,2,2">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                            <Condition Property="IsSelectionActive" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </Window.Resources>


    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="3*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="346*"/>
            <RowDefinition Height="37*"/>
        </Grid.RowDefinitions>

        <!-- Time Spent Rewards -->
        <TextBlock Text="Time Spent Rewards" FontWeight="Bold" FontSize="16" Margin="5,5,5,5"/>
        <DataGrid x:Name="TimeSpentRewardsDataGrid" Grid.Row="1" CanUserAddRows="False" AutoGenerateColumns="False" Margin="5,5,5,10" SelectionChanged="TimeSpentRewardsDataGrid_SelectionChanged">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Prefix" Binding="{Binding NotificationPrefix}" Width="*" />
                <DataGridTextColumn Header="Time (Minutes)" Binding="{Binding RewardInterval}" Width="*" />
                <!-- Zaktualizowana kolumna Is Nexus Synced do używania ComboBox -->
                <DataGridTemplateColumn Header="Is Nexus Synced" Width="*" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding IsNexusSynced}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                    <DataGridTemplateColumn.CellEditingTemplate>
                        <DataTemplate>
                            <ComboBox SelectedItem="{Binding IsNexusSynced, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch">
                                <sys:Boolean>true</sys:Boolean>
                                <sys:Boolean>false</sys:Boolean>
                            </ComboBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellEditingTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Buttons for VoteRange -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Width="120" Height="33" VerticalAlignment="Center">
            <Button Style="{StaticResource ButtonStyle1}" Content="+" Width="20" Margin="5" Click="AddVoteRangeButton_Click"/>
            <Button Style="{StaticResource ButtonStyle1}" Content="-" Width="20" Margin="5" Click="RemoveVoteRangeButton_Click"/>
            <Button Style="{StaticResource ButtonStyle1}" Content="Save" Width="50" Margin="5" Click="SaveVoteRanges_Click"/>
        </StackPanel>

        <!-- Reward Items for Selected Vote Range -->
        <TextBlock Grid.Column="1" Text="Reward Items for Selected" FontWeight="Bold" FontSize="16" Margin="5,5,5,5"/>
        <DataGrid x:Name="RewardItemsDataGrid" Grid.Column="1" Grid.Row="1" CanUserAddRows="False" AutoGenerateColumns="False" Margin="5,5,5,10">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Item Type ID" Width="*" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding ItemTypeId}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                    <DataGridTemplateColumn.CellEditingTemplate>
                        <DataTemplate>
                            <ComboBox 
                        ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.AvailableItemTypes}" 
                        SelectedItem="{Binding ItemTypeId}" 
                        SelectionChanged="ItemTypeComboBox_SelectionChanged"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellEditingTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn Header="Item Subtype ID" Width="*" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding ItemSubtypeId}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                    <DataGridTemplateColumn.CellEditingTemplate>
                        <DataTemplate>
                            <ComboBox x:Name="ItemSubtypeComboBox" ItemsSource="{Binding AvailableSubTypeIds}" SelectedItem="{Binding ItemSubtypeId}" />

                        </DataTemplate>
                    </DataGridTemplateColumn.CellEditingTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Amount One (from)" Binding="{Binding AmountOne}" IsReadOnly="False" Width="*" />
                <DataGridTextColumn Header="Amount Two (to)" Binding="{Binding AmountTwo}" IsReadOnly="False" Width="*" />
                <DataGridTextColumn Header="Chance to Drop (%)" Binding="{Binding ChanceToDrop}" IsReadOnly="False" Width="*" />
            </DataGrid.Columns>
        </DataGrid>

        <!-- Buttons for Rewards -->
        <StackPanel Grid.Column="1" Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Width="250" Margin="0,2,0,0" Height="33" VerticalAlignment="Top">
            <Button Style="{StaticResource ButtonStyle1}" Content="Add Reward" Width="80" Margin="5" Click="AddRewardButton_Click"/>
            <Button Style="{StaticResource ButtonStyle1}" Content="Remove Selected Reward" Width="150" Margin="5" Click="RemoveRewardButton_Click"/>
        </StackPanel>
    </Grid>
</Window>